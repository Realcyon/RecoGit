<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="stylesheet" type="text/css" href="/public/global.css" />
    <title>{{name}}</title>
    <style>
      :root {
        --black: #4e5883;
        --size-1: 5px;
	      --size-2: 8px;
	      --size-3: 13px;
	      --size-4: 21px;
	      --size-5: 34px;
	      --size-6: 55px;
	      --size-7: 89px;
	      --size-8: 144px;
	      --size-9: 233px;
	      --size-10: 377px;
	      --size-11: 610px;
	      --size-12: 987px;
      }
      main{
        display:grid;
        grid-template-columns: 60vw 30vw;
        grid-template-rows: 1fr;
        /*grid-gap: 10px;*/
        max-width: 90vw

      }

      article{
        display: grid;
        grid-gap: var(--size-3);
        grid-template-columns: repeat(auto-fit, var(--size-8));
        grid-auto-rows: var(--size-9);
        justify-content: center;
      }

      .card{
        cursor: pointer;
        height: 100%;
        display: grid;
        grid-template-columns: 1fr 1fr 1fr;
        grid-template-rows: 1fr 1fr 1fr 1fr 1fr 1fr;
        background-color:rgb(230, 230,230);
        color: black;
        margin: 0px;

      }

      .titlePiece{
        grid-row: 3/4;
        grid-column: 1/3;
      }
      
      .datePiece{
        grid-row: 4/5;
        grid-column: 1/4;
        text-align: right;
      }
      
      .notesPiece{
        grid-row: 5/7;
        grid-column: 1/4;
        text-align: left;
      }

      .notesDisplay{
        border-width: var(--size-3);
        
        /*border-radius: 50px;*/
        
      }
      

      #edited{
        background-color: rgb(230, 230, 230);
        display: grid;
        grid-template-columns: 10vw 10vw 10vw;
        grid-template-rows: 13vh 13vh 13vh 13vh 13vh 13vh;
      }

      textarea.unsaved{
        border-color: rgb(255, 0, 0);
      }

      textarea.saved{
        border-color: rgb(95, 255, 47);
        resize: none;
      }

    </style>
  </head>
  <body>
    {{>header}}
    <nav>{{{navigation}}}</nav>
    <main class="content">
      <article>
        {{#each piece}}
          <section class="card" id="{{this.title}}">
            <h2 class="titlePiece">{{this.title}}</h2>
            <p class="datePiece" id="{{this.title}}Date">{{this.additionDate}}</p>
            <p class="notesPiece">{{this.notes}}</p>
          </section>
        {{/each}}
      </article>
      <form id="edited">
        <h2 class="titlePiece" id="titleDisplay"></h2>
        <p class="datePiece" id="dateDisplay"></p>
        <textarea class="notesPiece notesDisplay saved" id="notesDisplay" autocomplete="off" disabled></textarea>
        <input type="submit">
      </form>
    </main>
    {{>footer}}
  </body>

  <script>
    console.log(document.styleSheets);
    //document.styleSheets[1].rules[6].style = `border-color: green; border-width: 10px;`;

    let notTypingId;
    document.getElementById("notesDisplay").addEventListener("input",()=> {
      //console.log("input");
      document.querySelector("textarea").classList.remove("saved");
      document.querySelector("textarea").classList.remove("unsaved");
      clearTimeout(notTypingId);
      notTypingId = setTimeout(() => {
        console.log("saved");
        save();
      },2000);
    })

    document.querySelectorAll(".card").forEach((el) => {
      el.addEventListener("click", () => {
        displaySelection(el.id);
        document.getElementById("notesDisplay").removeAttribute("disabled");

      })
    });

    document.querySelectorAll(".datePiece").forEach((dateEl)=>{
      const rawDate = parseInt(dateEl.textContent); 
      dateEl.textContent = transformDate(rawDate);
    })

    async function displaySelection(selectedTitle){
      const res = await fetch("/api/section/display",{
        method:"post",
        headers:{
          "Content-Type":"application/json"
        },

        body:JSON.stringify({
          title:selectedTitle,
          section:'{{name}}'
        })
        
      })//.catch(err => console.err("Couldn't fetch ", err));
      const editedPiece = await res.json();
      //console.log(editedPiece)

      const rawDate = parseInt(editedPiece.additionDate)

      document.getElementById("titleDisplay").innerHTML = editedPiece.title;
      document.getElementById("dateDisplay").innerHTML = transformDate(rawDate);
      document.getElementById("notesDisplay").value = editedPiece.notes;
    };
    
    const formEdited = document.querySelector('form');

    formEdited.addEventListener("submit", async (ev) => {
      ev.preventDefault();
      console.log(document.getElementById("notesDisplay").value);
      save();
    });


    const typeArea = document.getElementById('notesDisplay');
    typeArea.addEventListener('change',() => {
        clearTimeout(notTypingId);
        save();
      
        
    })
  let serverRequestDelay = 2000;
    async function save(){
      noServerResponseId = setTimeout(() => {
        document.querySelector("textarea").classList.add("unsaved");
        save();
        console.log("retry Save");
        if(serverRequestDelay < 60000){
          serverRequestDelay = serverRequestDelay*1.5;
        }
        console.log(serverRequestDelay);
      },serverRequestDelay);
      const res = await fetch("/api/section/edit",{
        method:"post",
        headers:{
          "Content-Type":"application/json"
        },
        body:JSON.stringify({
          title: document.getElementById('titleDisplay').innerText,
          section:'{{name}}',
          notes: document.getElementById("notesDisplay").value
        })
      });
      const resultSave = await res.json();
      console.log(resultSave);
      if (resultSave == "saveSucessful"){
        document.querySelector("textarea").classList.add("saved");
        clearTimeout(noServerResponseId);
      }else{

        if(resultSave == "saveFail"){
          document.querySelector("textarea").classList.add("unsaved");
        }
      }
    }

    function transformDate(rawDate){
      const newDate = new Date(rawDate)
      const displayDate = newDate.toLocaleDateString(undefined, {
        //weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric',
      });
      return displayDate
    }
  </script>
</html>